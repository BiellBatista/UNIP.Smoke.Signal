/* %W% %E% Gabriel Batista
 *
 * Copyright (c) 2000-2012 Razão Social Ltda. Todos os direitos reservados.
 *
 * Esse software é informação confidencial e proprietária da Razão
 * Social Ltda. ("Informação Confidencial"). Você não deve divulgar
 * tal Informação Confidencial e deve usá-la apenas em concordância
 * com os termos de acordo de licença que você entrou com a Laranja Games Ltda.
 *
 * 
 * LARANJA GAMES LTDA NÃO FAZ REPRESENTAÇÃO OU DÁ GARANTIAS SOBRE A
 * ADEQUAÇÃO DO SOFTWARE, SEJA EXPRESSA OU IMPLICADA, INCLUINDO MAS
 * NÃO LIMITANDO AS GARANTIAS DE COMERCIALIZAÇÃO, ADEQUAÇÃO PARA UM
 * DETERMINADO FIM PARTICULAR OU NÃO-VIOLAÇÃO. LARANJA GAMES LTDA NÃO
 * SERÁ RESPONSÁVEL POR QUALQUER DANO SOFRIDO PELO LICENCIADO EM
 * DECORRÊNCIA DO USO, MODIFICAÇÃO OU DISTRIBUIÇÃO DESSE SOFTWARE OU
 * SEUS DERIVADOS.
 */

package br.com.unip.cc.windows;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import br.com.unip.cc.hardware.VoIP;

import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import java.awt.Font;
import javax.swing.ImageIcon;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

/**
 * Esta classe representa a tela do chat
 * 
 * @version 0.1 21/Abr/2017
 * @author Igor Faggion
 */

@SuppressWarnings("serial")
public class JFChat extends JFrame {
	private JPanel contentPane = null;
	private PrintWriter escritor = null;
	private JTextField textEnvia = null;
	private JTextArea txtrRecebe = null;
	private JScrollPane spChat = null;
	private JButton btnEnviar = null;
	private JButton btnChamar = null;
	private Scanner leitor = null;
	private Socket socket = null;
	private String texto = null;
	private String nome = null;

	public JFChat(String nome) {
		this.nome = nome;
		initComponents();
		setVisible(true);
	}

	private void initComponents() {	
		setTitle("Chat");
		setIconImage(Toolkit.getDefaultToolkit().getImage("res//icone.jpg"));
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 601, 545);

		contentPane = new JPanel();
		contentPane.setBackground(Color.DARK_GRAY);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		contentPane.add(getTextField());
		contentPane.add(getBtnEnviar());
		contentPane.add(getBtnChamar());
		contentPane.add(getSpChat());
		
		configurarRede();
	}

	public JTextArea getTxtrChat() {
		if(txtrRecebe == null) {
			txtrRecebe = new JTextArea();
			txtrRecebe.setEditable(false);
		}

		return txtrRecebe;
	}

	public JScrollPane getSpChat() {
		if(spChat == null) {
			spChat = new JScrollPane(getTxtrChat());
			spChat.setBounds(10, 11, 558, 450);
		}

		return spChat;
	}

	public JTextField getTextField() {
		if(textEnvia == null) {
			textEnvia = new JTextField();
			textEnvia.setFont(new Font("Tahoma", Font.PLAIN, 28));
			textEnvia.setBounds(10, 467, 375, 28);
			textEnvia.setColumns(10);
			textEnvia.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					
				}
			});
		}

		return textEnvia;
	}

	public JButton getBtnEnviar() {
		if(btnEnviar == null) {
			btnEnviar = new JButton();
			btnEnviar.setIcon(new ImageIcon("res\\enviarNOVO.png"));
			btnEnviar.setBounds(395, 467, 77, 31);
			btnEnviar.addActionListener(new falaServidor());
		}

		return btnEnviar;
	}

	public JButton getBtnChamar() {
		if(btnChamar == null) {
			btnChamar = new JButton();
			btnChamar.setIcon(new ImageIcon("res\\ChamarNOVO.png"));
			btnChamar.setBounds(483, 467, 85, 31);
			btnChamar.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					VoIP voip = new VoIP();
					voip.captureAudio();
				}
			});
		}

		return btnChamar;
	}

	private void configurarRede() {
		try {
			//socket = new Socket(Inet4Address.getLocalHost().getHostAddress(), 5000);
			socket = new Socket("25.2.100.155", 1350);
			escritor = new PrintWriter(socket.getOutputStream());
			leitor = new Scanner(socket.getInputStream());
			new Thread(new escutaServidor()).start();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void keyPressed(KeyEvent tecla) {
		if(tecla.getKeyCode() == KeyEvent.VK_ENTER)
			new falaServidor();
	}

	private class escutaServidor implements Runnable {
		public void run() {
			while((texto = leitor.nextLine()) != null)
				txtrRecebe.append(texto + "\n");
		}
	}
	
	private class falaServidor implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			escritor.println(nome + " : " + textEnvia.getText());
			escritor.flush();

			textEnvia.setText("");
			textEnvia.requestFocus(); 
		}
	}
}